package com.project.accounttransfer.entity;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.validation.constraints.NotBlank;
import javax.validation.constraints.PositiveOrZero;

import lombok.Builder;

@Entity
public class Account {
	/* Transaction id is autogenerated */
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	private Long accountId;

	/* Accountnumber of accountholder which is not blank */
	@NotBlank(message = "Please add Account Number")
	private String acctNumber;
	/* email of accountholder for notification purpose */
	private String email;

	@Builder.Default
	@PositiveOrZero
	/* account balance of accountholder for withdrawing & depositing operations */
	private double balance = 0.0;

	/* fetching accountid */
	public Long getAccountId() {
		return accountId;
	}

	/* get accountnumber */
	public String getAcctNumber() {
		return acctNumber;
	}

	/* get Balance of account */
	public double getBalance() {
		return balance;
	}

	/* set Balance of account */
	public void setBalance(double balance) {
		this.balance = balance;
	}
	
	/* No Arg constructor */
	public Account() {
		super();
	}

	/* Parameterized constructor with accountid,emailid & accountnumber */
	public Account(Long accountId, @NotBlank(message = "Please add Account Number") String acctNumber, String email,
			@PositiveOrZero double balance) {
		super();
		this.accountId = accountId;
		this.acctNumber = acctNumber;
		this.email = email;
		this.balance = balance;
	}

//@Parameter:amount= Withdrawing the amount from account
	public synchronized double withdraw(double amount, Account acct) {
		if (amount < 0) // withdraw value is negative
		{
			throw new ArithmeticException("Error: Withdraw amount is invalid.");

		} else if (amount > acct.getBalance()) // withdraw value exceeds balance
		{

			throw new ArithmeticException("Error: Insufficient funds.");
		} else
			balance = balance - amount;
		return balance;
	}

	/*-----------------------------------------------------------------
	Validates the transaction, then deposits the specified amount
	 into the account. Returns the new balance.
	----------------------------------------------------------------
	@Parameter:amount= depositing the amount in account*/
	public synchronized double deposit(double amount) {
		if (amount < 0) // deposit value is negative
		{
			System.out.println("Error: Deposit amount is invalid.");

		} else
			balance = balance + amount;
		return balance;
	}
}
